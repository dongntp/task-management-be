openapi: "3.0.0"
info:
  title: Swagger
  version: v1
servers:
  - url: "{API_HOST}/{BASE_PATH}"
    variables:
      API_HOST:
        default: http://localhost:3000
      BASE_PATH:
        default: v1
tags:
  - name: healthcheck
    description: Healthcheck
  - name: Admin
    description: APIs for admin actions
  - name: Employer
    description: APIs for employer actions
  - name: Employee
    description: APIs for employee actions

security:
  - basicAuth: []

paths:
  /healthcheck:
    get:
      summary: Healthcheck
      operationId: healthcheck
      tags:
        - Healthcheck
      responses:
        "200":
          description: Return OK
          content:
            application/json:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/ClientError"
        "500":
          $ref: "#/components/responses/ServerError"

  /admin/createAccount:
    post:
      summary: Create new account
      operationId: createAccount
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountRequest"
      responses:
        "200":
          description: Return true if success
          content:
            application/json:
              schema:
                type: boolean
        "400":
          $ref: "#/components/responses/ClientError"
        "500":
          $ref: "#/components/responses/ServerError"

  /admin/updateAccount:
    post:
      summary: Activate, deactivate or update accounts. `username` is required. All other fields should be excluded unless modified.
      operationId: updateAccount
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccountRequest"
      responses:
        "200":
          description: Return true if success
          content:
            application/json:
              schema:
                type: boolean
        "400":
          $ref: "#/components/responses/ClientError"
        "500":
          $ref: "#/components/responses/ServerError"

  /employer/task:
    get:
      summary: Get tasks by employer
      operationId: getTasksByEmployer
      tags:
        - Employer
      parameters:
        - $ref: "#/components/parameters/assignee"
        - $ref: "#/components/parameters/status"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/orderDirection"
      responses:
        "200":
          description: Return tasks list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/responses/ClientError"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      summary: Create new task
      operationId: createTask
      tags:
        - Employer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskRequest"
      responses:
        "200":
          description: Return task id
          content:
            application/json:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/ClientError"
        "500":
          $ref: "#/components/responses/ServerError"

    put:
      summary: Assign task
      operationId: assignTask
      tags:
        - Employer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignTaskRequest"
      responses:
        "200":
          description: Return true if success
          content:
            application/json:
              schema:
                type: boolean
        "400":
          $ref: "#/components/responses/ClientError"
        "500":
          $ref: "#/components/responses/ServerError"

  /employee/task:
    get:
      summary: Get tasks by employee
      operationId: getTasksByEmployee
      tags:
        - Employee
      responses:
        "200":
          description: Return tasks list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/responses/ClientError"
        "500":
          $ref: "#/components/responses/ServerError"

    put:
      summary: Update task status
      operationId: updateTaskStatus
      tags:
        - Employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTaskStatusRequest"
      responses:
        "200":
          description: Return true if success
          content:
            application/json:
              schema:
                type: boolean
        "400":
          $ref: "#/components/responses/ClientError"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Use `user` / `passwd` as the test credentials

  schemas:
    CreateAccountRequest:
      type: object
      required:
        - username
        - password
        - role
      properties:
        username:
          type: string
        password:
          type: string
        role:
          $ref: "#/components/schemas/Role"

    Role:
      type: string
      enum:
        - Employee
        - Employer

    UpdateAccountRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
        active:
          type: boolean
        newUsername:
          type: string
        newPassword:
          type: string
        newRole:
          $ref: "#/components/schemas/Role"

    CreateTaskRequest:
      type: object
      required:
        - title
        - description
        - dueDate
      properties:
        title:
          type: string
        description:
          type: string

    AssignTaskRequest:
      type: object
      required:
        - taskID
        - username
      properties:
        taskID:
          type: string
        username:
          type: string

    UpdateTaskStatusRequest:
      type: object
      required:
        - taskID
        - status
      properties:
        taskID:
          type: string
        status:
          $ref: "#/components/schemas/Status"

    Status:
      type: string
      enum:
        - Pending
        - InProgress
        - Completed

    Task:
      type: object
      required:
        - id
        - title
        - description
        - status
        - creationDate
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        assignee:
          type: string
        status:
          $ref: "#/components/schemas/Status"
        creationDate:
          type: string
          format: date-time

    OrderBy:
      type: string
      enum:
        - CreationDate
        - Status

    OrderDirection:
      type: string
      enum:
        - ASC
        - DESC

  parameters:
    assignee:
      name: assignee
      in: query
      description: Filter tasks by assignee
      schema:
        type: string

    status:
      name: status
      in: query
      description: Filter tasks by status
      schema:
        $ref: "#/components/schemas/Status"

    orderBy:
      name: orderBy
      in: query
      description: Choose the order field
      schema:
        $ref: "#/components/schemas/OrderBy"

    orderDirection:
      name: orderDirection
      in: query
      description: Choose the order direction
      schema:
        $ref: "#/components/schemas/OrderDirection"

  responses:
    ClientError:
      description: Client error
      content:
        application/json:
          schema:
            type: string
            example: Client error message
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            type: string
            example: Server error message
